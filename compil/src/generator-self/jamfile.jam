path-constant TOP : .. ;
path-constant ROOT : $(TOP)/.. ;

import convert ;

project generator-self
    : requirements 
        <include>compiler/model
        <include>generator/aligner/object
    ;

boost-defines ;

lib generator-self-compil :
    $(TOP)/core/boost/boost_assert_handler.cpp
    
    compiler/model/alter.compil
    compiler/model/castable_type.compil
    compiler/model/comment.compil
    compiler/model/default_value.compil
    compiler/model/document.compil
    compiler/model/enumeration_value.compil
    compiler/model/field.compil
    compiler/model/field_override.compil
    compiler/model/filter.compil
    compiler/model/identification.compil
    compiler/model/identifier.compil
    compiler/model/import.compil
    compiler/model/interface.compil
    compiler/model/method.compil
    compiler/model/name.compil
    compiler/model/object_factory.compil
    compiler/model/object.compil
    compiler/model/operator.compil
    compiler/model/package.compil
    compiler/model/parameter.compil
    compiler/model/reference.compil
    compiler/model/source_id.compil
    compiler/model/unary_container.compil
    compiler/model/unary_template.compil
    compiler/model/upcopy.compil
    compiler/model/version.compil
    
    generator/method_group.compil
    
    generator/cpp/format/argument.compil
    generator/cpp/format/cast_operator.compil
    generator/cpp/format/comment.compil
    generator/cpp/format/constructor_specifier.compil
    generator/cpp/format/constructor_name.compil
    generator/cpp/format/constructor.compil
    generator/cpp/format/decorated_type.compil
    generator/cpp/format/destructor_specifier.compil
    generator/cpp/format/destructor_name.compil
    generator/cpp/format/destructor.compil
    generator/cpp/format/function_call.compil
    generator/cpp/format/function_name.compil
    generator/cpp/format/function.compil
    generator/cpp/format/initialization.compil
    generator/cpp/format/method_declaration.compil
    generator/cpp/format/method_name.compil
    generator/cpp/format/method_specifier.compil
    generator/cpp/format/method.compil
    generator/cpp/format/namespace_name.compil
    generator/cpp/format/namespace.compil
    generator/cpp/format/parameter_value.compil
    generator/cpp/format/simple_type.compil
    generator/cpp/format/type_declaration.compil
    generator/cpp/format/type_decoration.compil
    generator/cpp/format/variable_name.compil

    [ convert _ cpp 
      :
        compiler/model/enumeration.compil
        compiler/model/factory.compil
        compiler/model/integer.compil
        compiler/model/specimen.compil
        compiler/model/structure.compil
        compiler/model/type.compil
      :
        <compil-type>partial
    ]
    
    boost_templates
  :
    <compil-type>main
    <include>$(TOP)/core/c++
  ;



