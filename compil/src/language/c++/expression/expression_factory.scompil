// CompIL - Component Interface Language
// Copyright 2011 George Georgiev.  All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * The name of George Georgiev can not be used to endorse or 
// promote products derived from this software without specific prior 
// written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Author: george.georgiev@hotmail.com (George Georgiev)
//

compil { }

import "c++/expression/additive_shift_expression.scompil";
import "c++/expression/cast_pm_expression.scompil";
import "c++/expression/class_nested_name.scompil";
import "c++/expression/constructor_call_expression.scompil";
import "c++/expression/custom_expression.scompil";
import "c++/expression/custom_id_expression.scompil";
import "c++/expression/custom_postfix_expression.scompil";
import "c++/expression/id_expression_primary_expression.scompil";
import "c++/expression/identifier_unqualified_id.scompil";
import "c++/expression/generic_additive_expression.scompil";
import "c++/expression/generic_equality_expression.scompil";
import "c++/expression/generic_relational_expression.scompil";
import "c++/expression/grammar_additive_expression.scompil";
import "c++/expression/grammar_equality_expression.scompil";
import "c++/expression/grammar_relational_expression.scompil";
import "c++/expression/member_access_postfix_expression.scompil";
import "c++/expression/method_call_expression.scompil";
import "c++/expression/multiplicative_additive_expression.scompil";
import "c++/expression/namespace_nested_name.scompil";
import "c++/expression/nested_name_specifier.scompil";
import "c++/expression/parentheses_postfix_expression.scompil";
import "c++/expression/pm_multiplicative_expression.scompil";
import "c++/expression/postfix_unary_expression.scompil";
import "c++/expression/primary_expression_postfix_expression.scompil";
import "c++/expression/relational_equality_expression.scompil";
import "c++/expression/shift_relational_expression.scompil";
import "c++/expression/unary_cast_expression.scompil";
import "c++/expression/unqualified_id_expression.scompil";
import "c++/expression/variable_expression.scompil";

package lang.cpp | *.*.*;

hierarchy
factory<Expression> ExpressionFactory
{
}