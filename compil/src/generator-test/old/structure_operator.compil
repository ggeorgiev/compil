compil { }

package operator_;

structure Structure1
{
    native operator == ;
    function operator == ;
    native operator < ;
    function operator < ;
    functor operator < ;
    
    weak enum Weak
    {
        value1;
        value2;
    }
    
    strong enum Strong
    {
        value1;
        value2;
    }
    
    integer i1;
    Weak w1;
    Strong s1;
    string str1;
}

structure Structure2a inherit Structure1
{
    native operator == ;
    function operator == ;
    native operator < ;
    function operator < ;
}

structure Structure2b inherit Structure1
{
    native operator == ;
    function operator == ;
    native operator < ;
    function operator < ;

    integer i2;
    Structure2a s2;
}

structure NoOperatorStructure
{
    integer i;
}

structure INoOperatorWithNativeEqStructure
    inherit NoOperatorStructure
{
    native operator == ;
}

structure INoOperatorWithNativeLtStructure
    inherit NoOperatorStructure
{
    native operator < ;
}

structure INoOperatorWithFunctionalEqStructure
    inherit NoOperatorStructure
{
    function operator == ;
}

structure INoOperatorWithFunctionalLtStructure
    inherit NoOperatorStructure
{
    function operator < ;
}

structure FunctionalEqStructure
{
    function operator == ;
}

structure IEqWithNativeEqStructure
    inherit FunctionalEqStructure
{
    native operator == ;
}

structure IEqWithNativeLtStructure
    inherit FunctionalEqStructure
{
    native operator < ;
}

structure IFunctionalEqWithFunctionalEqStructure
    inherit FunctionalEqStructure
{
    function operator == ;
}

structure IFunctionalEqWithFunctionalLtStructure
    inherit FunctionalEqStructure
{
    function operator < ;
}

structure IFunctionalEqWithFunctorEqStructure
    inherit FunctionalEqStructure
{
    functor operator == ;
}

structure IFunctionalEqWithFunctorLtStructure
    inherit FunctionalEqStructure
{
    functor operator < ;
}
